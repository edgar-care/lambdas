# Patient entity
type Patient {
    id: ID!
    email: String!
    password: String!
    name: String!
    lastName: String!
    age: Int!
    height: Int!
    weight: Int!
    sex: Sex!
}

# Doctor entity
type Doctor {
    id: ID!
    email: String!
    password: String!
    name: String!
    lastName: String!
    address: String!
}

# Admin entity
type Admin {
    id: ID!
    email: String!
    password: String!
    name: String!
    lastName: String!
}

# Session entity
type Session {
	id: ID!
	symptoms: [String!]!
    age: Int!
    height: Int!
    weight: Int!
    sex: String!
	last_question: String!
}

# Symptom entity
type Symptom {
	id: ID!
	code: String!
    symptom: [String!]!
    advice: String
    question: String!
}

type Info {
	id: ID!
	name: String!
    age: Int!
    height: Int!
    weight: Int!
    sexe: String!
	surname: String!
}

type Health {
	id:	ID!
	patientallergies: String!
	patientsillness: String!
}

type Notification {
	id:	ID!
	token: String!
	title: String!
    message: String!
}

type Query {
    # Get the entire list of patients.
    getPatients: [Patient]

    # Find a patient using its id.
    getPatientById(id: String!): Patient

    # Find a patient using its email.
    getPatientByEmail(email: String!): Patient

    # Get the entire list of doctors.
    getDoctors: [Doctor]

    # Find a doctor using its id.
    getDoctorById(id: String!): Doctor

    # Find a doctor using its email.
    getDoctorByEmail(email: String!): Doctor

    # Find an admin using its email.
    getAdminByEmail(email: String!): Admin

    # Get the entire list of sessions.
    getSessions: [Session]

    # Find a session using its id.
    getSessionById(id: String!): Session

    # Find a session using its id.
    getSymptomById(id: String!): Symptom

    # Get the entire list of info.
    getInfos: [Info]

    # Find a info using its id.
    getInfoById(id: String!): Info

    # Get the entire list of symptoms
    getSymptoms: [Symptom]

    # Get the entire list of health.
    getHealths: [Health]

    # Find a health using its id.
    getHealthById(id: String!): Health

    # Get the entire list of notification.
    getNotifications: [Notification]

    # Find a Notification using its id.
    getNotificationById(id: String!): Notification
}

type Mutation {
    # Create a new patient.
    createPatient(email: String!, password: String!, name: String!, lastName: String!, age: Int!, height: Int!, weight: Int!, sex: String!): Patient

    # Update a patient.
    updatePatient(id: String!, email: String, password: String, name: String, lastName: String, age: Int, height: Int, weight: Int, sex: String): Patient

    # Delete a patient.
    deletePatient(id: String!): Boolean

    # Create a new doctor.
    createDoctor(email: String!, password: String!, name: String!, lastName: String!, address: String!): Doctor

    # Update a doctor.
    updateDoctor(id: String!, email: String, password: String, name: String, lastName: String, address: String): Doctor

    # Delete a doctor.
    deleteDoctor(id: String!): Boolean

    # Create a new doctor.
    createAdmin(email: String!, password: String!, name: String!, lastName: String!): Admin

    # Update a doctor.
    updateAdmin(id: String!, email: String, password: String, name: String, lastName: String): Admin

    # Delete a doctor.
    deleteAdmin(id: String!): Boolean

    # Create a new session.
    createSession(symptoms: [String!]!, age: Int!, height: Int!, weight: Int!, sex: String!, last_question: String!): Session

    # Update a new session.
    updateSession(id: String!, symptoms: [String!], age: Int, height: Int, weight: Int, sex: String, last_question: String): Session

    # Delete a session.
    deleteSession(id: String!): Boolean

    # Create a new symptom.
    createSymptom(code: String!, symptom: [String!]!, advice: String, question: String!): Symptom

     # Update a new symptom.
    updateSymptom(id: String!, code: String, symptom: [String!], advice: String, question: String): Symptom

    # Delete a symptom.
    deleteSymptom(id: String!): Boolean

    # Create a new info.
    createInfo(name: String!, age: Int!, height: Int!, weight: Int!, sexe: String!, surname: String!): Info

    # Update a new info.
    updateInfo(id: String!, name: String!, age: Int, height: Int, weight: Int, sexe: String, surname: String): Info

    # Delete a info.
    deleteInfo(id: String!): Boolean

    # Create a new health.
    createHealth(patientallergies: String!, patientsillness: String!): Health

    # Update a new health.
    updateHealth(id: String!, patientallergies: String!, patientsillness: String!): Health

    # Delete a health.
    deleteHealth(id: String!): Boolean

    # Create a new notification.
    createNotification(token: String!, message: String!, title: String!): Notification

    # Update a new notification.
    updateNotification(id: String!, token: String!, message: String!, title: String!): Notification

    # Delete a notification.
    deleteNotification(id: String!): Boolean
}

enum Sex {
    M,
    F
}